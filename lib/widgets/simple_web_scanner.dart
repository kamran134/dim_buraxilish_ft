import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'manual_input_dialog.dart';

// –ò–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
import 'dart:html' as html;
import 'dart:async';

class SimpleWebScanner extends StatefulWidget {
  final Function(String) onScan;
  final VoidCallback onClose;
  final String? scannerType;

  const SimpleWebScanner({
    super.key,
    required this.onScan,
    required this.onClose,
    this.scannerType = 'participant',
  });

  @override
  State<SimpleWebScanner> createState() => _SimpleWebScannerState();
}

class _SimpleWebScannerState extends State<SimpleWebScanner> {
  html.VideoElement? _video;
  html.MediaStream? _stream;
  bool _isScanning = false;
  bool _cameraReady = false;
  String _errorMessage = '';
  List<String> _debugLogs = [];

  @override
  void initState() {
    super.initState();
    _addLog('INFO: Komponentin ba≈üladƒ±lmasƒ±');
    _addLog('INFO: Platforma: ${kIsWeb ? "Web" : "Mobile"}');
    _addLog('INFO: User-Agent: ${html.window.navigator.userAgent}');
    _addLog('INFO: URL: ${html.window.location.href}');
    _addLog('INFO: Protocol: ${html.window.location.protocol}');
    _startCamera();
  }

  void _addLog(String message) {
    final timestamp = DateTime.now().toIso8601String().substring(11, 19);
    final logEntry = '[$timestamp] $message';
    debugPrint(logEntry);
    setState(() {
      _debugLogs.add(logEntry);
      if (_debugLogs.length > 20) {
        _debugLogs.removeAt(0);
      }
    });
  }

  @override
  void dispose() {
    _stopCamera();
    super.dispose();
  }

  Future<void> _startCamera() async {
    _addLog('INFO: _startCamera() ba≈üladƒ±');

    if (!kIsWeb) {
      _addLog('ERROR: Platform web deyil');
      return;
    }

    try {
      _addLog('INFO: Navigator m…ôlumatlarƒ± yoxlanƒ±lƒ±r...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (html.window.navigator.mediaDevices == null) {
        _addLog('ERROR: MediaDevices API d…ôst…ôkl…ônmir');
        setState(() {
          _errorMessage = 'Bu brauzer kamera d…ôst…ôkl…ômir';
        });
        return;
      }

      _addLog('INFO: MediaDevices API m√∂vcuddur');

      _addLog('INFO: getUserMedia m√∂vcuddur');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      final protocol = html.window.location.protocol;
      final hostname = html.window.location.hostname;
      _addLog('INFO: Protocol: $protocol, Hostname: $hostname');

      if (protocol != 'https:' &&
          hostname != 'localhost' &&
          hostname != '127.0.0.1') {
        _addLog('ERROR: T…ôhl√ºk…ôsiz baƒülantƒ± t…ôl…ôb olunur');
        setState(() {
          _errorMessage =
              'Kamera √º√ß√ºn HTTPS lazƒ±mdƒ±r.\nT…ôhl√ºk…ôsiz baƒülantƒ± istifad…ô edin.';
        });
        return;
      }

      _addLog('INFO: Baƒülantƒ± t…ôhl√ºk…ôsizdir');

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        _addLog('INFO: ∆èl√ßatan cihazlar yoxlanƒ±lƒ±r...');
        final devices =
            await html.window.navigator.mediaDevices!.enumerateDevices();
        final videoDevices =
            devices.where((device) => device.kind == 'videoinput').toList();
        _addLog('INFO: Video cihazlarƒ± tapƒ±ldƒ±: ${videoDevices.length}');

        for (int i = 0; i < videoDevices.length; i++) {
          final device = videoDevices[i];
          _addLog(
              'INFO: Cihaz $i: ${device.label.isNotEmpty ? device.label : "Adƒ± yoxdur"} (${device.deviceId})');
        }
      } catch (e) {
        _addLog('WARNING: Cihazlar siyahƒ±sƒ± alƒ±nmadƒ±: $e');
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
      final constraints = {
        'video': {
          'facingMode': 'environment',
          'width': {'ideal': 640},
          'height': {'ideal': 480},
        }
      };

      _addLog('INFO: Kamera icaz…ôsi t…ôl…ôb edilir...');
      _addLog('INFO: Constraints: $constraints');

      _stream =
          await html.window.navigator.mediaDevices!.getUserMedia(constraints);
      _addLog('INFO: Kamera axƒ±nƒ± alƒ±ndƒ±');

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
      final videoTracks = _stream!.getVideoTracks();
      _addLog('INFO: Video trek sayƒ±: ${videoTracks.length}');

      if (videoTracks.isNotEmpty) {
        final track = videoTracks.first;
        _addLog('INFO: Video trek: ${track.label}, Aktiv: ${track.enabled}');
        final settings = track.getSettings();
        _addLog('INFO: Trek parametrl…ôri: $settings');
      }

      // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
      _addLog('INFO: Video element yaradƒ±lƒ±r...');
      _video = html.VideoElement()
        ..autoplay = true
        ..muted = true
        ..setAttribute('playsinline', 'true')
        ..style.width = '100%'
        ..style.height = '100%'
        ..style.objectFit = 'cover';

      _video!.srcObject = _stream;
      _addLog('INFO: Video elementi kameraya baƒülandƒ±');

      _addLog('INFO: Video metadata g√∂zl…ônilir...');
      await _video!.onLoadedMetadata.first;
      _addLog('INFO: Video metadata y√ºkl…ôndi');

      setState(() {
        _cameraReady = true;
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ DOM –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      _video!
        ..id = 'flutter-camera-video'
        ..style.position = 'fixed'
        ..style.top = '0'
        ..style.left = '0'
        ..style.width = '100vw'
        ..style.height = '100vh'
        ..style.objectFit = 'cover'
        ..style.zIndex = '-1'; // –ü–æ–º–µ—â–∞–µ–º –ø–æ–¥ Flutter –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

      html.document.body!.append(_video!);
      _addLog('INFO: Video element DOM-a …ôlav…ô edildi v…ô g√∂st…ôrilir');

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
      _addLog(
          'INFO: Video √∂l√ß√ºl…ôri: ${_video!.videoWidth}x${_video!.videoHeight}');

      // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      _addLog('INFO: Skan d√∂vr√º ba≈ülayƒ±r...');
      _startScanLoop();

      _addLog('SUCCESS: Kamera uƒüurla ba≈üladƒ±ldƒ±!');
    } catch (e) {
      _addLog('ERROR: Kamera x…ôtasƒ± ba≈ü verdi: $e');

      String errorMsg;
      final errorString = e.toString();

      if (errorString.contains('NotAllowedError') ||
          errorString.contains('Permission denied')) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        final userAgent = html.window.navigator.userAgent.toLowerCase();
        String instructions;

        if (userAgent.contains('crios') || userAgent.contains('chrome')) {
          // Chrome –Ω–∞ iOS –∏–ª–∏ Android
          instructions = '''
üì± Chrome brauzerd…ô kamera icaz…ôsi:

1. √únvan s…ôtrind…ôki üîí simvoluna toxunun
2. "Kamera" se√ßin
3. "ƒ∞caz…ô ver" se√ßin
4. S…ôhif…ôni yenil…ôyin (‚ü≥)

V…ô ya:
‚Ä¢ Brauzer Parametrl…ôri ‚Üí Sayt parametrl…ôri ‚Üí eservices.dim.gov.az ‚Üí Kamera ‚Üí ƒ∞caz…ô ver''';
        } else if (userAgent.contains('safari')) {
          // Safari
          instructions = '''
üì± Safari brauzerd…ô kamera icaz…ôsi:

1. √únvan s…ôtrind…ôki üîí simvoluna toxunun  
2. "Kamera √º√ß√ºn icaz…ô ver" se√ßin
3. S…ôhif…ôni yenil…ôyin

V…ô ya:
‚Ä¢ Parametrl…ôr ‚Üí Safari ‚Üí Kamera ‚Üí Bu sayt √º√ß√ºn soru≈ü''';
        } else {
          // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          instructions = '''
üì± Kamera icaz…ôsi verm…ôk √º√ß√ºn:

1. √únvan s…ôtrind…ôki üîí v…ô ya ‚öôÔ∏è simvoluna toxunun
2. "Kamera" se√ßimini tapƒ±n  
3. "ƒ∞caz…ô ver" v…ô ya "Allow" se√ßin
4. S…ôhif…ôni yenil…ôyin

‚ö†Ô∏è ƒ∞caz…ô verm…ôd…ôn kamera i≈ül…ôm…ôy…ôc…ôk!''';
        }

        errorMsg = 'Kamera icaz…ôsi t…ôl…ôb olunur!\n\n$instructions';
        _addLog('ERROR: NotAllowedError - ƒ∞caz…ô r…ôdd edildi');
        _addLog(
            'INFO: Browser: ${userAgent.contains('crios') ? 'Chrome iOS' : userAgent.contains('safari') ? 'Safari' : 'Nam…ôlum'}');
      } else if (errorString.contains('NotFoundError')) {
        errorMsg =
            'Kamera tapƒ±lmadƒ±.\nCihazƒ±nƒ±zda kamera olduƒüundan …ômin olun.';
        _addLog('ERROR: NotFoundError - Kamera tapƒ±lmadƒ±');
      } else if (errorString.contains('NotReadableError')) {
        errorMsg = 'Kamera ba≈üqa proqram t…ôr…ôfind…ôn istifad…ô olunur.';
        _addLog('ERROR: NotReadableError - Kamera m…ô≈üƒüuldur');
      } else if (errorString.contains('OverconstrainedError')) {
        errorMsg = 'Kamera parametrl…ôri d…ôst…ôkl…ônmir.\nBa≈üqa kamera se√ßin.';
        _addLog('ERROR: OverconstrainedError - Parametrl…ôr uyƒüun deyil');
      } else if (errorString.contains('TypeError')) {
        errorMsg =
            'Brauzer kamera API d…ôst…ôkl…ômir.\nDaha yeni brauzer istifad…ô edin.';
        _addLog('ERROR: TypeError - API d…ôst…ôkl…ônmir');
      } else {
        errorMsg = 'Kamera x…ôtasƒ±:\n$errorString';
        _addLog('ERROR: Nam…ôlum x…ôta: $errorString');
      }

      setState(() {
        _errorMessage = errorMsg;
      });
      debugPrint('Camera error: $e');
    }
  }

  void _startScanLoop() {
    _addLog('INFO: _startScanLoop() √ßaƒüƒ±rƒ±ldƒ±');

    if (!_cameraReady || _video == null) {
      _addLog('WARNING: Kamera hazƒ±r deyil v…ô ya video null');
      return;
    }

    setState(() {
      _isScanning = true;
    });

    _addLog('INFO: Skan d√∂vr√º aktiv edildi');

    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤
    final canvas = html.CanvasElement();
    final context = canvas.context2D;
    _addLog('INFO: Canvas yaradƒ±ldƒ±');

    // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 500ms
    Timer.periodic(const Duration(milliseconds: 500), (timer) {
      if (!_isScanning || _video == null) {
        _addLog('INFO: Skan d√∂vr√º dayandƒ±rƒ±ldƒ±');
        timer.cancel();
        return;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
        final videoWidth = _video!.videoWidth;
        final videoHeight = _video!.videoHeight;

        if (videoWidth == 0 || videoHeight == 0) {
          _addLog('WARNING: Video √∂l√ß√ºl…ôri 0: ${videoWidth}x${videoHeight}');
          return;
        }

        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
        canvas.width = videoWidth;
        canvas.height = videoHeight;
        context.drawImage(_video!, 0, 0);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if (DateTime.now().millisecondsSinceEpoch % 10000 < 500) {
          _addLog('INFO: Kadr √ß…ôkildi: ${videoWidth}x${videoHeight}');
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è QR –¥–µ–∫–æ–¥–µ—Ä–∞
        // final imageData = context.getImageData(0, 0, canvas.width!, canvas.height!);

        // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å QR –¥–µ–∫–æ–¥–µ—Ä
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        _simulateQRDetection();
      } catch (e) {
        _addLog('ERROR: Skan x…ôtasƒ±: $e');
        debugPrint('Scan error: $e');
      }
    });
  }

  void _simulateQRDetection() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã QR –¥–µ–∫–æ–¥–µ—Ä
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    if (DateTime.now().millisecondsSinceEpoch % 30000 < 500) {
      _addLog('INFO: QR dekoder simulyasiyasƒ± i≈ül…ôyir');
    }
  }

  void _stopCamera() {
    _addLog('INFO: Kamera dayandƒ±rƒ±lƒ±r...');

    setState(() {
      _isScanning = false;
      _cameraReady = false;
    });

    if (_stream != null) {
      final tracks = _stream!.getTracks();
      _addLog('INFO: ${tracks.length} trek dayandƒ±rƒ±lƒ±r');
      tracks.forEach((track) {
        track.stop();
        _addLog('INFO: Trek dayandƒ±rƒ±ldƒ±: ${track.label}');
      });
      _stream = null;
    }

    if (_video != null) {
      _video!.remove();
      _video = null;
      _addLog('INFO: Video elementi silindi');
    }

    _addLog('INFO: Kamera tamamil…ô dayandƒ±rƒ±ldƒ±');
  }

  void _showManualInput() {
    if (widget.scannerType == 'supervisor') {
      ManualInputDialog.showSupervisorDialog(
        context,
        (input) {
          widget.onScan(input);
        },
      );
    } else {
      ManualInputDialog.showParticipantDialog(
        context,
        (input) {
          widget.onScan(input);
        },
      );
    }
  }

  void _showPermissionHelp() {
    final userAgent = html.window.navigator.userAgent.toLowerCase();
    String browserName;
    List<String> steps;

    if (userAgent.contains('crios')) {
      browserName = 'Chrome (iOS)';
      steps = [
        '1. √únvan s…ôtrind…ôki üîí simvoluna toxunun',
        '2. "Kamera" se√ßimini tapƒ±n',
        '3. "ƒ∞caz…ô ver" se√ßin',
        '4. S…ôhif…ôni yenil…ôyin (‚ü≥ d√ºym…ôsi)',
        '',
        'Alternativ:',
        '‚Ä¢ Chrome Parametrl…ôri ‚Üí Sayt Parametrl…ôri',
        '‚Ä¢ eservices.dim.gov.az tapƒ±n',
        '‚Ä¢ Kamera ‚Üí ƒ∞caz…ô ver',
      ];
    } else if (userAgent.contains('safari')) {
      browserName = 'Safari';
      steps = [
        '1. √únvan s…ôtrind…ôki üîí simvoluna toxunun',
        '2. "Kamera √º√ß√ºn icaz…ô ver" se√ßin',
        '3. S…ôhif…ôni yenil…ôyin',
        '',
        'Alternativ:',
        '‚Ä¢ Parametrl…ôr ‚Üí Safari',
        '‚Ä¢ Kamera ‚Üí Bu sayt √º√ß√ºn soru≈ü',
      ];
    } else {
      browserName = 'Brauzer';
      steps = [
        '1. √únvan s…ôtrind…ôki üîí v…ô ya ‚öôÔ∏è toxunun',
        '2. "Kamera" se√ßimini tapƒ±n',
        '3. "ƒ∞caz…ô ver" se√ßin',
        '4. S…ôhif…ôni yenil…ôyin',
        '',
        '‚ö†Ô∏è H…ôr brauzerd…ô f…ôrqli ola bil…ôr',
      ];
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('$browserName - Kamera ƒ∞caz…ôsi'),
        content: SizedBox(
          width: double.maxFinite,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'üì± Kamera icaz…ôsi verm…ôk √º√ß√ºn:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              const SizedBox(height: 16),
              ...steps.map((step) => Padding(
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    child: Text(
                      step,
                      style: const TextStyle(height: 1.4),
                    ),
                  )),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Text(
                  'üí° ƒ∞caz…ô verdikd…ôn sonra "Yenid…ôn c…ôhd et" d√ºym…ôsini basƒ±n',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: Colors.blue,
                  ),
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Anladƒ±m'),
          ),
        ],
      ),
    );
  }

  void _showDebugLogs() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Diaqnostika Loglarƒ±'),
        content: SizedBox(
          width: double.maxFinite,
          height: 400,
          child: Column(
            children: [
              Text(
                'Loglar sayƒ±: ${_debugLogs.length}',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              Expanded(
                child: ListView.builder(
                  itemCount: _debugLogs.length,
                  itemBuilder: (context, index) {
                    final log = _debugLogs[index];
                    Color textColor = Colors.black;
                    if (log.contains('ERROR:')) {
                      textColor = Colors.red;
                    } else if (log.contains('WARNING:')) {
                      textColor = Colors.orange;
                    } else if (log.contains('SUCCESS:')) {
                      textColor = Colors.green;
                    } else if (log.contains('INFO:')) {
                      textColor = Colors.blue;
                    }

                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2),
                      child: SelectableText(
                        log,
                        style: TextStyle(
                          fontSize: 12,
                          fontFamily: 'monospace',
                          color: textColor,
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              // –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
              Clipboard.setData(ClipboardData(text: _debugLogs.join('\n')));
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Loglar kopyalandƒ±')),
              );
            },
            child: const Text('Kopyala'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Baƒüla'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.black,
      child: Stack(
        children: [
          // –ö–∞–º–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ HTML video —ç–ª–µ–º–µ–Ω—Ç –≤ —Ñ–æ–Ω–µ

          // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          if (_cameraReady) ...[
            // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ —Ü–µ–Ω—Ç—Ä–µ
            Container(
              color: Colors.black.withOpacity(0.5),
            ),

            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            Center(
              child: Container(
                width: 280,
                height: 280,
                decoration: BoxDecoration(
                  border: Border.all(
                    color: Colors.green,
                    width: 3,
                  ),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Stack(
                  children: [
                    // –£–≥–ª—ã —Ä–∞–º–∫–∏
                    ...List.generate(4, (index) {
                      final isTop = index < 2;
                      final isLeft = index % 2 == 0;
                      return Positioned(
                        top: isTop ? -1.5 : null,
                        bottom: !isTop ? -1.5 : null,
                        left: isLeft ? -1.5 : null,
                        right: !isLeft ? -1.5 : null,
                        child: Container(
                          width: 40,
                          height: 40,
                          decoration: BoxDecoration(
                            border: Border(
                              top: isTop
                                  ? const BorderSide(
                                      color: Colors.green, width: 3)
                                  : BorderSide.none,
                              bottom: !isTop
                                  ? const BorderSide(
                                      color: Colors.green, width: 3)
                                  : BorderSide.none,
                              left: isLeft
                                  ? const BorderSide(
                                      color: Colors.green, width: 3)
                                  : BorderSide.none,
                              right: !isLeft
                                  ? const BorderSide(
                                      color: Colors.green, width: 3)
                                  : BorderSide.none,
                            ),
                          ),
                        ),
                      );
                    }),

                    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–º–µ—Ä—ã)
                    Center(
                      child: Container(
                        width: 260,
                        height: 260,
                        decoration: BoxDecoration(
                          color: Colors.transparent,
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: Colors.green.withOpacity(0.3),
                            width: 1,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–Ω–∏–∑—É
            Positioned(
              bottom: 200,
              left: 20,
              right: 20,
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.7),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  'üì± QR kodu kamera g√∂r√º≈ü√ºn…ô yerl…ô≈üdirin\nAvtomatik tanƒ±ma veb versiyasƒ±nda m…ôhduddur',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],

          // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          if (!_cameraReady)
            Center(
              child: Container(
                margin: const EdgeInsets.all(24),
                padding: const EdgeInsets.all(32),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.3),
                      blurRadius: 10,
                      offset: const Offset(0, 5),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      _cameraReady
                          ? Icons.qr_code_scanner
                          : _errorMessage.isNotEmpty
                              ? Icons.error
                              : Icons.camera_alt,
                      size: 64,
                      color: _cameraReady
                          ? Colors.green
                          : _errorMessage.isNotEmpty
                              ? Colors.red
                              : Colors.blue,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      _cameraReady
                          ? 'Kamera Hazƒ±rdƒ±r!'
                          : _errorMessage.isNotEmpty
                              ? 'X…ôta ba≈ü verdi'
                              : 'Kamera y√ºkl…ônir...',
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.black87,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 12),
                    Container(
                      constraints: const BoxConstraints(maxHeight: 300),
                      child: SingleChildScrollView(
                        child: Text(
                          _cameraReady
                              ? 'Kamera i≈ül…ôyir, ancaq QR dekoder Flutter veb versiyasƒ±nda m…ôhduddur.\nQR kodunuzu …ôl il…ô daxil edin.'
                              : _errorMessage.isNotEmpty
                                  ? _errorMessage
                                  : 'Kamera hazƒ±rlanƒ±r...',
                          style: TextStyle(
                            fontSize: _errorMessage.contains('üì±') ? 14 : 16,
                            color: Colors.black54,
                            height: 1.5,
                            fontFamily: _errorMessage.contains('üì±')
                                ? 'monospace'
                                : null,
                          ),
                          textAlign: TextAlign.left,
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    if (_errorMessage.isNotEmpty) ...[
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () {
                                _addLog('INFO: Yenid…ôn c…ôhd d√ºym…ôsin…ô basƒ±ldƒ±');
                                setState(() {
                                  _errorMessage = '';
                                  _cameraReady = false;
                                });
                                _startCamera();
                              },
                              icon: const Icon(Icons.refresh, size: 18),
                              label: const Text('Yenid…ôn c…ôhd et'),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.orange,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 12,
                                ),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                            ),
                          ),
                          if (_errorMessage.contains('NotAllowedError') ||
                              _errorMessage.contains('üì±')) ...[
                            const SizedBox(width: 8),
                            Expanded(
                              child: ElevatedButton.icon(
                                onPressed: () {
                                  _addLog(
                                      'INFO: Parametrl…ôr d√ºym…ôsin…ô basƒ±ldƒ±');
                                  _showPermissionHelp();
                                },
                                icon: const Icon(Icons.settings, size: 18),
                                label: const Text('K√∂m…ôk'),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.blue,
                                  foregroundColor: Colors.white,
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 16,
                                    vertical: 12,
                                  ),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ],
                      ),
                      const SizedBox(height: 12),
                    ] else ...[
                      // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–ª—É—á–∞—è –æ—à–∏–±–æ–∫
                      ElevatedButton.icon(
                        onPressed: () {
                          _addLog('INFO: ∆èl il…ô daxiletm…ô d√ºym…ôsin…ô basƒ±ldƒ±');
                          _showManualInput();
                        },
                        icon: const Icon(Icons.keyboard),
                        label: const Text('QR kodu …ôll…ô daxil et'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 32,
                            vertical: 16,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),

          // –í–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.black54,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: IconButton(
                      onPressed: widget.onClose,
                      icon: const Icon(
                        Icons.arrow_back,
                        color: Colors.white,
                      ),
                    ),
                  ),
                  const Spacer(),
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.blue.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: IconButton(
                      onPressed: _showDebugLogs,
                      icon: const Icon(
                        Icons.bug_report,
                        color: Colors.white,
                        size: 20,
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _cameraReady
                          ? Colors.green.withOpacity(0.8)
                          : Colors.black54,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      _cameraReady ? 'KAMERA AKTƒ∞V' : 'WEB VERSIYA',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–Ω–∏–∑—É (–∫–æ–≥–¥–∞ –∫–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
          if (_cameraReady)
            Positioned(
              bottom: 80,
              left: 20,
              right: 20,
              child: Center(
                child: ElevatedButton.icon(
                  onPressed: () {
                    _addLog('INFO: ∆èl il…ô daxiletm…ô d√ºym…ôsin…ô basƒ±ldƒ±');
                    _showManualInput();
                  },
                  icon: const Icon(Icons.keyboard),
                  label: const Text('QR kodu …ôll…ô daxil et'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 32,
                      vertical: 16,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
